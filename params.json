{
  "name": "ysched",
  "tagline": "A fast, functional, and featureful coroutine scheduler.",
  "body": "# ysched\r\n\r\n***\r\n\r\n\r\n**Docs**\r\n\r\n###### `yield(function condition, (optional) function callback, (optional) callback arguments)`\r\n\r\nIf only a condition is passed, resume execution after condition is met. If a function callback is provided, call that function after with the arguments specified by the optional callback arguments list. Additional callback arguments can be provided by passing additional arguments to yield. \r\n\r\n\r\n###### `wait(float seconds)` \r\n\r\nCalls the custom yield function with a function that waits for the amount of seconds provided. Uses os.clock() as a time source. Resumes execution after the amount of seconds that has been passed.\r\n\r\n###### `spawn(function createasync)`\r\n\r\nCreate a function and add it to the scheduler thread, so it runs \"asynchronously\". \r\n\r\n\r\n\r\n***\r\n\r\n\r\n\r\n**Usage**\r\n\r\nThere are two ways of using ysched. You can directly launch scripts using it, or you can just require it from your script. \r\n\r\n\r\n###### Direct Launch\r\n\r\nUse lua (or luajit) in the commandline with the first argument being ysched.lua and the second being the script you want it to manage. As an example, you can load `TARGETFILE.lua` in the scheduler with: `luajit ysched.lua TARGETFILE.lua`\r\n\r\n###### Requiring\r\nPut ysched in the same folder as your script, and then add: \r\n```lua\r\nrequire \"ysched\"\r\n```\r\nto the top of your script. \r\n\r\n\r\n***\r\n\r\n\r\n\r\n**Code Examples**\r\n\r\n###### Input\r\n```lua\r\nrequire \"scheduler\\\\ysched\"\r\nprint \"Start\"\r\n\r\nlocal variable = 5\r\n\r\nprint(\"Line 5: \" .. os.clock())\r\n\r\nspawn(function()\r\n    print(\"Line 8: \" .. os.clock())\r\n    yield(function() return variable == 10 end, print, \"'variable' is \" .. variable)\r\n    print(\"Line 10: \" .. os.clock())\r\nend)\r\n\r\nprint(\"Line 13: \" .. os.clock())\r\nwait(3)\r\nprint(\"Line 15: \" .. os.clock())\r\nvariable = 10\r\nprint(\"Line 17: \" .. os.clock())\r\n```\r\n\r\n###### Output\r\n```\r\nStart\r\nLine 5: 0\r\nLine 13: 0\r\nLine 8: 0\r\nLine 15: 3\r\nLine 17: 3\r\nLine 10: 3.001\r\nlua: scheduler\\ysched.lua:70: Execution complete.\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}