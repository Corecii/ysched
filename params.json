{
  "name": "Usched",
  "tagline": "Somewhat small coroutine scheduler in Lua with support for neat yielding features.",
  "body": "# usched\r\n### Easily control script execution.\r\n##### An easy, advanced, coroutine based Lua scheduler. \r\n\r\n###### Docs: \r\n\r\n`wait(float seconds)` - Calls custom yield function with a check. Resumes execution after the amount of seconds that has been passed.\r\n\r\n`yield(function condition, (optional) function callback, (optional) callback arguments)` - If only a condition is passed, resume execution after condition is met. If a function callback is provided, call that function after with the arguments specified by the optional callback arguments list. Additional callback arguments can be provided by passing additional arguments to yield. \r\n\r\n`spawn(function createasync)` - Create a function and add it to the scheduler thread, so it runs \"asynchronously\". \r\n\r\n\r\n###### Usage\r\nThere are two ways of using usched. You can directly launch scripts using it, or you can just require it from your script. \r\n**Direct Launch**\r\n`luajit usched.lua TARGETFILE.lua`\r\n\r\n**Requiring**\r\nPut usched in the same folder as your script, and then add \r\n```lua\r\nrequire \"usched\"\r\n```\r\nto the top of your script. \r\n\r\n###### Examples\r\n\r\n**Input:**\r\n```lua\r\nrequire \"scheduler\\\\usched\"\r\nprint \"Start\"\r\n\r\nlocal variable = 5\r\n\r\nprint(\"Line 5: \" .. os.clock())\r\n\r\nspawn(function()\r\n\tprint(\"Line 8: \" .. os.clock())\r\n\tyield(function() return variable == 10 end, print, \"'variable' is \" .. variable)\r\n\tprint(\"Line 10: \" .. os.clock())\r\nend)\r\n\r\nprint(\"Line 13: \" .. os.clock())\r\nwait(3)\r\nprint(\"Line 15: \" .. os.clock())\r\nvariable = 10\r\nprint(\"Line 17: \" .. os.clock())\r\n```\r\n\r\n**Output:**\r\n```\r\nStart\r\nLine 5: 0\r\nLine 13: 0\r\nLine 8: 0\r\nLine 15: 3\r\nLine 17: 3\r\nLine 10: 3.001\r\nlua: scheduler\\usched.lua:70: Execution complete.\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}